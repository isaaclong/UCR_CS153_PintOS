Lab 3 Notes
(Giving more hints on Project 1 timer part, and explanations of scheduler part)

TIMER

-I put most of the timer hints inside timer.c file comments

SCHEDULING

We want to run threads with high priority before threads with lower priority.

Implement these functions:

  set/get priority
  another yield function (based on priority)
  reevaluate priority (need this for priority donation)

  within lock release and lock acquire functions 

example:

  lock on some block of code

  L M H priority threads

  Say low priority acquires lock first
  Have a lock struck method that gets threads within lock
  H donates priority to L so that it will complete fast

  lock_acquire
      _release

  ...is where this code will run

***TA explanation was extremely fast and pretty scattered, this was the best I could get.
Add more/make changes if possible! I believe there is pretty good documentation on this too.


Notes from Friday:
-sema_down is preferred to thread_block (and unblock), since sema_down takes care of things
    that thread_block will still require you to do manually
-notes on timer_interrupt()

//current look of timer_interrupt, plus TA suggestions
timer_interrupt() {
    tick++;    
    thread_tick();
    //add the below things:
    //go through the sleeping list and check everything that needs to be awoken
    //  (this list should probably be sorted..?)
    //wake if necessary
    //either yield the thread normally, or, if the latter part of part B is completed,
    //  you can yield higher thread priority
}


thread_init() is called when the OS is initialized
init_thread() is called when a new thread is created


lock_acquire()


foo();


lock_release()

-to add priority, we'll have to add a priority property to the thread(.h?) file, and also add the
set and get priority functions, as well as yield priority function (make a new one, don't change
the original because that's easier to mess up)
-use the get_max() function in the implemented lists (aka don't need to sort)
-get that one and push it onto the ready list

priority donation:
-add to donation list, and every time you are gonna call priority, call the function that evaluates priority
-if you always do that, you never have to worry about wonky special cases


done:
-priority property in thread.h thread struct (already there)
-TODO: implement set/get_priority function, yield_priority apparently exists,
but i have yet to find it.
-added thread_yield2, an exact clone of thread_yield, to thread.h and thread.c
-TODO: add stuff at the end of the interrupt function which determines which
thread to run


thinkin':
-go to the point that threads are added to the ready list (thread_init?)
    -in that function, call get_max_elem or whatever and test if the new
     thread is of greater priority than the currently runnning thread
    -if that's the case, we need to switch the processor to the new one (how
     is that done? I think maybe we thread_block the currently running one and
     thread_unblock the other one)
-go to the point when threads wait for access to something (i think this might
 be related to thread_sleep in some way and awaken the highest priority thread)
    -


things that i overheard josh telling people about:

when priority can change (aka when you need to determine priority again):
    -create a thread
        -is it automatically placed on the ready list? get_max to get highest
         priority to run
    -finish a thread (pretty much taken care of for you) thread_block or yield
     calls schedule, calls something else, ...
        -if priority stuff is done in there, when the thread finishes, you
         just call that
    -when you set priority


call unblock, and check which has the highest priority. i have no idea what
function this is supposed to be in.

when you call the lock and all threads realize that some thread l has the lock, they're
all waiting for l



QUESTION LIST: 

ii.
